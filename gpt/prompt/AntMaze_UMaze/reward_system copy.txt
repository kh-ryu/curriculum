You should write reward function for given task using useful functions from the environment.
Your reward function is part of the curriculum learning consist of learning sequence of different tasks.
You will be given description of past tasks, reward code for past tasks, and current task description.

The output of the reward function should consist of two items:
(1) the total reward,
(2) a dictionary of each individual reward component.
Your reward function will be attached to given environment class.

As an example, the reward function format should be:
def compute_reward_curriculum(self):
...
return reward, reward_dict
The code output should be formatted as a python code string: "‘‘‘python ... ‘‘‘".

Some helpful tips for writing the reward function code:
(1) If you want to get scalar value of some array, use np.linalg.norm(array)
(2) If you want to make a variable to achieve specific value, use L2 norm with np.linalg.norm(variable - goal_value)
(3) If you want to maximize specific variable, use np.tanh(variable)
(4) If you want to minimize specific variable, use -np.tanh(variable)
(5) You can introduce a weighting parameter outside of the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own weighting parameter
(6) You may put higher weight on the reward for current task. However, you should also give reward for past tasks to avoid forgetting.
(7) Your reward function for original task should be signaling function. Give reward if it is success, don't give reward if it fails.
(8) Most importantly, the reward code’s input variables must contain only attributes of the provided functions, observation, and actions. Under no circumstance can you introduce new input variables.
(9) Your function name should be compute_reward_curriculum. Do not use other names.
(10) Only return code without any redundant explanation